//HintName: Repository.g.cs
// <auto-generated/>
#nullable enable
namespace Repono;
public static class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddRepono(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.Add(new global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor(typeof(global::Repono.IQueryHandler<Tests.FooQuery>), typeof(global::Tests.FooQueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped));
        services.Add(new global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor(typeof(global::Repono.IQueryHandler<Tests.BarQuery, decimal>), typeof(global::Tests.BarQueryHandler), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped));
        services.Add(new global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor(typeof(global::Repono.IRepository), typeof(DefaultRepository), global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped));
        return services;
    }
}

internal sealed class DefaultRepository : global::Repono.IRepository
{
    private readonly global::System.IServiceProvider _serviceProvider;
    public DefaultRepository(global::System.IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }
    public global::System.Threading.Tasks.Task ExecuteAsync(global::Repono.IQuery query, global::System.Threading.CancellationToken cancellationToken)
    {
        if (query is global::Tests.FooQuery q1)
        {
            return ExecuteInternalAsync(q1, cancellationToken);
        }
        throw new global::System.InvalidOperationException($"Query handler not found for {query.GetType()}.");
    }
    public global::System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(global::Repono.IQuery<TResult> query, global::System.Threading.CancellationToken cancellationToken)
    {
        if (query is global::Tests.BarQuery q1)
        {
            var task = ExecuteInternalAsync<global::Tests.BarQuery,decimal>(q1, cancellationToken);
            return (task as global::System.Threading.Tasks.Task<TResult>)!;
        }
        throw new global::System.InvalidOperationException($"Query handler not found for {query.GetType()}.");
    }

    private global::System.Threading.Tasks.Task ExecuteInternalAsync<TQuery>(TQuery query, global::System.Threading.CancellationToken cancellationToken)
        where TQuery : notnull, global::Repono.IQuery
    {
        var decorators = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices<global::Repono.IQueryDecorator<TQuery, global::System.Object>>(_serviceProvider) ?? global::System.Linq.Enumerable.Empty<global::Repono.IQueryDecorator<TQuery, global::System.Object>>();
        var handler = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Repono.IQueryHandler<TQuery>>(_serviceProvider);

        var adapter = new QueryResultlessAdapter<TQuery>(handler);
        var pipeline = BuildHandlerPipeline(decorators, adapter.ExecuteAsync);

        return pipeline.Invoke(query, cancellationToken);
    }

    private global::System.Threading.Tasks.Task<TResult> ExecuteInternalAsync<TQuery, TResult>(TQuery query, global::System.Threading.CancellationToken cancellationToken)
        where TQuery : notnull, global::Repono.IQuery<TResult>
    {
        var decorators = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices<global::Repono.IQueryDecorator<TQuery, TResult>>(_serviceProvider) ?? global::System.Linq.Enumerable.Empty<global::Repono.IQueryDecorator<TQuery, TResult>>();
        var handler = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Repono.IQueryHandler<TQuery, TResult>>(_serviceProvider);

        var pipeline = BuildHandlerPipeline(decorators, handler.ExecuteAsync);

        return pipeline.Invoke(query, cancellationToken);
    }

    private static global::System.Func<TQuery, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> BuildHandlerPipeline<TQuery, TResult>(
        global::System.Collections.Generic.IEnumerable<global::Repono.IQueryDecorator<TQuery, TResult>> decorators,
        global::System.Func<TQuery, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> handlerExecuteFunc)
        where TQuery : notnull
    {
        return global::System.Linq.Enumerable.Aggregate(
            decorators,
            handlerExecuteFunc,
            (h, d) => (q, ct) => d.ExecuteAsync(q, () => h(q, ct), ct));
    }

    private struct QueryResultlessAdapter<TQuery>
        where TQuery : notnull, global::Repono.IQuery
    {
        private readonly static global::System.Object VoidResult = new global::System.Object();
        private readonly global::Repono.IQueryHandler<TQuery> _innerHandler;

        public QueryResultlessAdapter(global::Repono.IQueryHandler<TQuery> innerHandler)
        {
            _innerHandler = innerHandler;
        }

        public async global::System.Threading.Tasks.Task<global::System.Object> ExecuteAsync(TQuery query, global::System.Threading.CancellationToken cancellationToken)
        {
            await _innerHandler.ExecuteAsync(query, cancellationToken);
            return VoidResult;
        }
    }
}
